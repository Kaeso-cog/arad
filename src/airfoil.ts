// function applyToArray(arr, f: (x: number) => number) {
//     let result = []
//     for(let i of arr) {
//         result.push(f(i))
//     }
//     return result
// }

// applyToArray([1, 2, 3], x => x * 2) // [2, 4, 6]

//this works if you have x=1 value first, then descending to origin and back up again
export const naca2H15: [number, number][] = [
    [1.0, 0.0],
    [0.95, 0.00157],
    [0.9, 0.00695],
    [0.8, 0.0305],
    [0.7, 0.06815],
    [0.6, 0.1],
    [0.5, 0.11635],
    [0.4, 0.1186],
    [0.3, 0.10985],
    [0.25, 0.10172],
    [0.2, 0.0913],
    [0.15, 0.07798],
    [0.1, 0.06195],
    [0.075, 0.05244],
    [0.05, 0.04133],
    [0.025, 0.02781],
    [0.0125, 0.01921],
    [0.0, 0.0],

    [0.0125, -0.01989],
    [0.025, -0.02219],
    [0.05, -0.02338],
    [0.075, -0.02406],
    [0.1, -0.02475],
    [0.15, -0.02543],
    [0.2, -0.026],
    [0.25, -0.02638],
    [0.3, -0.02705],
    [0.4, -0.0286],
    [0.5, -0.03045],
    [0.6, -0.032],
    [0.7, -0.03185],
    [0.8, -0.0276],
    [0.9, -0.02545],
    [0.95, -0.02443],
];

export const naca0015: [number, number][] = [
    [1.0, 0.00158],
    [0.95, 0.01008],
    [0.9, 0.0181],
    [0.8, 0.03279],
    [0.7, 0.0458],
    [0.6, 0.05704],
    [0.5, 0.06617],
    [0.4, 0.07254],
    [0.3, 0.07502],
    [0.25, 0.07427],
    [0.2, 0.07172],
    [0.15, 0.06682],
    [0.1, 0.05853],
    [0.075, 0.0525],
    [0.05, 0.04443],
    [0.025, 0.03268],
    [0.0125, 0.02367],
    [0.0, 0.0],
    [0.0125, -0.02367],
    [0.025, -0.03268],
    [0.05, -0.04443],
    [0.075, -0.0525],
    [0.1, -0.05853],
    [0.15, -0.06682],
    [0.2, -0.07172],
    [0.25, -0.07427],
    [0.3, -0.07502],
    [0.4, -0.07254],
    [0.5, -0.06617],
    [0.6, -0.05704],
    [0.7, -0.0458],
    [0.8, -0.03279],
    [0.9, -0.0181],
    [0.95, -0.01008],
    [1.0, -0.00158],
];

export const RAF6: [number, number][] = [
    [1.0, 0.0015],
    [0.89988, 0.03314],
    [0.7998101, 0.05378],
    [0.69974, 0.07142],
    [0.5997, 0.08406],
    [0.49967, 0.0917],
    [0.39966, 0.09534],
    [0.29966, 0.09578],
    [0.19967, 0.09062],
    [0.09973, 0.07426],
    [0.02487, 0.03599],
    [0.04981, 0.05408],
    [0.0, 0.0],
    [0.02502, -0.00501],
    [0.05002, -0.00492],
    [0.10002, -0.00474],
    [0.20002, -0.00438],
    [0.30001, -0.00402],
    [0.40001, -0.00366],
    [0.50001, -0.0033],
    [0.60001, -0.00294],
    [0.70001, -0.00258],
    [0.80001, -0.00222],
    [0.90001, -0.00186],
    [1.0, -0.0015],
];
